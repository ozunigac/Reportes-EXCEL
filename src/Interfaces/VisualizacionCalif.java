/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Test.Alumno;
import Test.Archivo;
import java.util.ArrayList;

/**
 *
 * @author User
 */
public class VisualizacionCalif extends javax.swing.JFrame {

    /**
     * Creates new form Busqueda
     */
    public VisualizacionCalif() {
        initComponents();
        Archivo archivo = new Archivo();
        MostrarCalificaciones(archivo.OrganizarAlumnoMateria());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTxt = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        asdasdasd = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("VISUALIZACION DE CALIFICACIONES DE TODOS LOS ALUMNOS");

        infoTxt.setColumns(20);
        infoTxt.setRows(5);
        jScrollPane1.setViewportView(infoTxt);

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        asdasdasd.setText("Ordenar los alumnos por calificacion:");

        jButton2.setText("Ordenar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(asdasdasd)
                        .addGap(58, 58, 58)
                        .addComponent(jButton2)
                        .addGap(92, 92, 92))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asdasdasd)
                    .addComponent(jButton2))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        Home home = new Home();
        home.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Archivo archivo = new Archivo();
        ArrayList<Alumno> alumno= new ArrayList<Alumno>();
        alumno= archivo.OrganizarAlumnoMateria();
        Ordenar(alumno);
    }//GEN-LAST:event_jButton2ActionPerformed


public void Ordenar(ArrayList<Alumno> alumno){
        infoTxt.setText("");
        //haremos el arreglo que va a ordenarse
        int matriculas[]=new int[alumno.size()];
        float arreglo[]=new float[alumno.size()];
        //empezamos a recorrer los alumnos
        for(int i=0;i<alumno.size();i++){
            //recorremos las materias de los alumnos
            for(int j=0;j<alumno.get(i).getMaterias().size();j++){
                //tomamos las calificaciones para obtener la calificacion global
                arreglo[i]+=alumno.get(i).getMaterias().get(j).getCalifFinal();
            }
            matriculas[i]=alumno.get(i).getMatricula();
            //dividimos la suma de las calificaciones entre las calificaciones
            arreglo[i]/=alumno.get(i).getMaterias().size();
        }
        
        
        //comprobamos la dimension del arreglo
        for(int i=0;i<arreglo.length-1; i++){
            //vamos usar la dimension del arreglo nuevamente
            for(int j=0;j<arreglo.length-1;j++){
                //si la posicion siguiente es menor entonces se coloca el numero mayor en la primera posicion
                if(arreglo[j]<arreglo[j+1]){
                    float tmp=arreglo[j+1];
                    int matriculaTmp=matriculas[j+1];
                    matriculas[j+1]=matriculas[j];
                    arreglo[j+1]=arreglo[j];
                    matriculas[j]=matriculaTmp;
                    arreglo[j]=tmp;
                }
            }
        }
        ArrayList<Alumno> alumnoTemp = new ArrayList<Alumno>();
        //imprimimos el arreglo ya ordenado
        for(int i = 0;i <arreglo.length; i++){
            for(int j=0; j<alumno.size();j++){
                if(matriculas[i]==alumno.get(j).getMatricula()){
                    infoTxt.append(alumno.get(j).getNombre()+" "+alumno.get(j).getApellidoPa()+" "+alumno.get(j).getApellidoMa()+" \t"+arreglo[i]+"\n");
                }
            }
        }        
    }

    private void MostrarCalificaciones(ArrayList<Alumno> alumno){
        infoTxt.setText("");
        for(int i=0;i<alumno.size();i++){
            //empezaremos a llenar el text area registro por registro o sea alumno por alumno
            infoTxt.append("Calificaciones del alumno: "+alumno.get(i).getNombre()+" "+alumno.get(i).getApellidoPa()
                    +" "+alumno.get(i).getApellidoMa()+" en las siguientes materias:\n");

            //empezaremos a poner las materias
            for(int j=0;j<alumno.get(i).getMaterias().size();j++){
                //se empieza a llenar el text area por las materias del alumno
                infoTxt.append("Materia: "+alumno.get(i).getMaterias().get(j).getNombre()+"\n");
                infoTxt.append("Asistencia: "+alumno.get(i).getMaterias().get(j).getAsistencia()+"\n");
                infoTxt.append("U1: "+alumno.get(i).getMaterias().get(j).getU1()+" \t U2: "+alumno.get(i).getMaterias().get(j).getU2()+" \t U3: "+
                        alumno.get(i).getMaterias().get(j).getU3()+" \t U4: "+alumno.get(i).getMaterias().get(j).getU4()+"\n");
                
                infoTxt.append("Calificacion final: "+alumno.get(i).getMaterias().get(j).getCalifFinal()+"\n");
                infoTxt.append("***************************************\n");
            }
            infoTxt.append("----------------------------------------------------------------------------------------------------------\n");
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel asdasdasd;
    private javax.swing.JTextArea infoTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
